// <auto-generated />
using System;
using Library.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Application.UseCases.Books.ViewModels.BookViewModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Author");

                    b.Property<string>("Isbn")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Isbn");

                    b.Property<string>("Subject")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subject");

                    b.Property<string>("Title")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Library.Domain.AggregateModels.BookAggregate.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("BookId")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("InStock")
                        .HasColumnType("bit")
                        .HasColumnName("InStock");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Library.Domain.AggregateModels.LibraryUserAggregate.LibraryUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("LibraryUserId")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.HasKey("Id");

                    b.ToTable("LibraryUser");
                });

            modelBuilder.Entity("Library.Domain.SharedKernel.Loan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("LoanId")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<long>("_bookId")
                        .HasColumnType("bigint")
                        .HasColumnName("BookId");

                    b.Property<long>("_userId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("_bookId");

                    b.HasIndex("_userId");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("Library.Application.UseCases.Books.ViewModels.BookViewModel", b =>
                {
                    b.HasOne("Library.Domain.AggregateModels.BookAggregate.Book", null)
                        .WithOne()
                        .HasForeignKey("Library.Application.UseCases.Books.ViewModels.BookViewModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.AggregateModels.BookAggregate.Book", b =>
                {
                    b.OwnsOne("Library.Domain.AggregateModels.BookAggregate.BookInformation", "BookInformation", b1 =>
                        {
                            b1.Property<long>("BookId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Author")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Author");

                            b1.Property<string>("Subject")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Subject");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Title");

                            b1.HasKey("BookId");

                            b1.ToTable("Book");

                            b1.WithOwner()
                                .HasForeignKey("BookId");

                            b1.OwnsOne("Library.Domain.AggregateModels.BookAggregate.Isbn", "Isbn", b2 =>
                                {
                                    b2.Property<long>("BookInformationBookId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bigint")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("Isbn");

                                    b2.HasKey("BookInformationBookId");

                                    b2.ToTable("Book");

                                    b2.WithOwner()
                                        .HasForeignKey("BookInformationBookId");
                                });

                            b1.Navigation("Isbn");
                        });

                    b.Navigation("BookInformation");
                });

            modelBuilder.Entity("Library.Domain.AggregateModels.LibraryUserAggregate.LibraryUser", b =>
                {
                    b.OwnsOne("Library.Domain.AggregateModels.LibraryUserAggregate.Email", "Email", b1 =>
                        {
                            b1.Property<long>("LibraryUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("LibraryUserId");

                            b1.ToTable("LibraryUser");

                            b1.WithOwner()
                                .HasForeignKey("LibraryUserId");
                        });

                    b.OwnsOne("Library.Domain.AggregateModels.LibraryUserAggregate.UserCredential", "Credentials", b1 =>
                        {
                            b1.Property<long>("LibraryUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Login")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Login");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Password");

                            b1.HasKey("LibraryUserId");

                            b1.ToTable("LibraryUser");

                            b1.WithOwner()
                                .HasForeignKey("LibraryUserId");
                        });

                    b.Navigation("Credentials");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Library.Domain.SharedKernel.Loan", b =>
                {
                    b.HasOne("Library.Domain.AggregateModels.BookAggregate.Book", null)
                        .WithMany("_loans")
                        .HasForeignKey("_bookId");

                    b.HasOne("Library.Domain.AggregateModels.LibraryUserAggregate.LibraryUser", null)
                        .WithMany("ActiveLoans")
                        .HasForeignKey("_userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Library.Domain.SharedKernel.DateTimePeriod", "BorrowPeriod", b1 =>
                        {
                            b1.Property<long>("LoanId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.HasKey("LoanId");

                            b1.ToTable("Loan");

                            b1.WithOwner()
                                .HasForeignKey("LoanId");
                        });

                    b.Navigation("BorrowPeriod");
                });

            modelBuilder.Entity("Library.Domain.AggregateModels.BookAggregate.Book", b =>
                {
                    b.Navigation("_loans");
                });

            modelBuilder.Entity("Library.Domain.AggregateModels.LibraryUserAggregate.LibraryUser", b =>
                {
                    b.Navigation("ActiveLoans");
                });
#pragma warning restore 612, 618
        }
    }
}
